https://www.dmosk.ru/miniinstruktions.php?mini=nginx-balancing


vim /etc/nginx/conf.d/upstreams.conf
/#
upstream dmosk_backend {
    server 192.168.10.10;
    server 192.168.10.11;
    server 192.168.10.12;
}
#/

vim /etc/nginx/sites-enabled/default
/#
server {
    ...
    location / {
        proxy_pass http://dmosk_backend;
    }
    ...
}
#/

nginx -t && nginx -s reload

№№№№№№№№№№№№№№№№№№№№№№№№№№№№№№№№№№№№№№№№Приоритеты№№№№№№№№№№№№№№№№№№№№№№№№№№№№№№№№№№№№№№№№

1) backup, которая будет говорить о наличие резервного сервера, к которому будет выполняться подключение только при отсутствии связи с остальными.
2) down, при указании которой, сервер будет считаться постоянно недоступным. Может оказаться полезной, чтобы остановить временно запросы для проведения обслуживания.
3) weight, задаёт кол-во запросов 

upstream dmosk_backend {
    server 192.168.10.10 weight=100;
    server 192.168.10.11 weight=10;
    server 192.168.10.12;
    server 192.168.10.13 backup;
}
переводить на сервер 192.168.10.10 в 10 раз больше запросов, чем на 192.168.10.11 и в 100 раз больше — чем на 192.168.10.12.
переводить на сервер 192.168.10.11 в 10 раз больше запросов, чем на 192.168.10.12.
на сервер 192.168.10.13 запросы переводятся, только если не доступны все три сервера, описанные выше.

№№№№№№№№№№№№№№№№№№№№№№№№№№№№№№№№№№№№№№№№Задержки, лимиты и таймауты№№№№№№№№№№№№№№№№№№№№№№№№№№№№№№№№№№№№№№№№

max_fails — количество неудачных попыток, после которых будем считать сервер недоступным.
fail_timeout — время, в течение которого сервер нужно считать недоступным и не отправлять на него запросы.
max_conns — максимальное число подключений, при превышении которого запросы на бэкенд не будут поступать. По умолчанию равно 0 (безлимитно).

upstream dmosk_backend {
    server 192.168.10.10 weight=100 max_conns=1000;
    server 192.168.10.11 weight=10 max_fails=2 fail_timeout=90s;
    server 192.168.10.12 max_fails=3 fail_timeout=2m;
    server 192.168.10.13 backup;
}
сервер 192.168.10.10 будет принимать на себя, максимум, 1000 запросов.
сервер 192.168.10.10 будет иметь настройки по умолчанию.
если на сервер 192.168.10.11 будет отправлено 2-е неудачные попытки отправки запроса, то в течение 90 секунд на него не будут отправлять новые запросы.
сервер 192.168.10.12 будет недоступен в течение 2-х минут, если на него будут отправлены 3 неудачных запроса.

№№№№№№№№№№№№№№№№№№№№№№№№№№№№№№№№№№№№№№№№Метод балансировки№№№№№№№№№№№№№№№№№№№№№№№№№№№№№№№№№№№№№№№№

Round Robin - Веб-сервер будет передавать запросы бэкендам по очереди с учетом их весов.
Hash - Данный метод определяет контрольную сумму на основе произвольного текста и/или переменных и ассоциирует каждый полученный результат с конкретным бэкендом (hash $scheme$request_uri;)
IP Hash - Ассоциация выполняется исходя из IP-адреса клиента и только для HTTP-запросов. Таким образом, для каждого посетителя устанавливается связь с одним и тем же сервером. Это, так называемый, Sticky Session метод. (ip_hash;)
Least Connections - NGINX определяет, с каким бэкендом меньше всего соединений в данный момент и перенаправляет запрос на него (с учетом весов). (least_conn;)
Random - Запросы передаются случайным образом (с учетом весов). Дополнительно можно указать опцию two — если она задана, то NGINX сначала выберет 2 сервера случайным образом, затем на основе дополнительных параметров отдаст предпочтение одному из них. (random two least_conn;)
Least Time (только в платной версии NGINX) - Балансировка выполняется исходя из времени ответа сервера. Предпочтение отдается тому, кто отвечает быстрее. (least_time header;)

№№№№№№№№№№№№№№№№№№№№№№№№№№№№№№№№№№№№№№№№Сценарии настройки№№№№№№№№№№№№№№№№№№№№№№№№№№№№№№№№№№№№№№№№

1. Backend на https
server {
    ...
    location / {
        proxy_pass https://dmosk_backend;
        proxy_set_header   Host             $host;
        proxy_set_header   X-Real-IP        $remote_addr;
        proxy_set_header   X-Forwarded-For  $proxy_add_x_forwarded_for;
    }
    ...
}

upstream dmosk_backend {
    server 192.168.10.10:443;
    server 192.168.10.11:443;
    server 192.168.10.12:443;
}

2. Разные бэкенды для разных страниц
server {
    ...
    location /page1 {
      proxy_pass http://backend1;
    }

    location /page2 {
      proxy_pass http://backend2;
    }
    ...
}

upstream backend1 {
    server 192.168.10.10;
    server 192.168.10.11;
}

upstream backend2 {
    server 192.168.10.12;
    server 192.168.10.13;
}

3. На другой хост
server {
    ...
    location / {
        proxy_pass https://dmosk_backend;
        proxy_set_header   Host             internal.domain.com;
        proxy_set_header   X-Real-IP        $remote_addr;
        proxy_set_header   X-Forwarded-For  $proxy_add_x_forwarded_for;
    }
    ...
5. TCP-запрос на СУБД PostgreSQL

...
http {
    ...
}

stream {
    upstream postgres {
        server 192.168.10.14:5432;
        server 192.168.10.15:5432;
    }

    server {
        listen 5432 so_keepalive=on;
        proxy_pass postgres;
    }
}
в данном примере мы слушаем TCP-порт 5432 и проксируем все запросы на апстрим postgres. Запросы будут случайным образом передаваться на серверы 192.168.10.14 и 192.168.10.15.
6. UDP-запрос
server {
    listen 53 udp;
    proxy_pass udp_dns;
    proxy_responses 1;
}

upstream udp_dns {
    server 192.168.10.16:53;
    server 192.168.10.17:53;
}
в данном примере мы слушаем UDP-порт 53 и проксируем все запросы на апстрим udp_dns. Опция proxy_responses говорит о том, что на один запрос нужно давать один ответ.

